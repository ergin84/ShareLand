# Generated by Django 5.2 on 2025-04-29 10:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Anagraphic',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('surname', models.TextField(blank=True, null=True)),
                ('username', models.TextField(blank=True, null=True)),
                ('password', models.TextField(blank=True, null=True)),
                ('contact_email', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anagraphic',
                'db_table_comment': 'Ogni utente registrato (anagraphic) può essere anche un autore, ma non è obbligatorio.\t\t\nOgni autore (author) può essere un utente registrato, ma può anche essere una persona esterna al sistema.\t\t\nIl rapporto tra le due tabelle è quindi uno a uno opzionale (1:1 opzionale)\t\t\n',
            },
        ),
        migrations.CreateModel(
            name='ArchaeologicalEvidence',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('id_archaeological_evidence_typology', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('id_country', models.IntegerField(blank=True, null=True)),
                ('id_region', models.IntegerField(blank=True, null=True)),
                ('id_municipality', models.IntegerField(blank=True, null=True)),
                ('id_physiography', models.IntegerField(blank=True, null=True)),
                ('id_positioning_mode', models.IntegerField(blank=True, null=True)),
                ('id_positional_accuracy', models.IntegerField(blank=True, null=True)),
                ('id_base_map', models.IntegerField(blank=True, null=True)),
                ('id_first_discovery_method', models.IntegerField(blank=True, null=True)),
                ('id_investigation', models.IntegerField(blank=True, null=True)),
                ('elevation', models.IntegerField(blank=True, null=True)),
                ('additional_topography', models.TextField(blank=True, null=True)),
                ('locality_name', models.TextField(blank=True, null=True)),
                ('id_province', models.IntegerField(blank=True, null=True)),
                ('lat', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('lon', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('id_chronology', models.IntegerField(blank=True, null=True)),
                ('chronology_certainty_level', models.IntegerField(blank=True, null=True)),
                ('geometry', models.TextField()),
            ],
            options={
                'db_table': 'archaeological_evidence',
            },
        ),
        migrations.CreateModel(
            name='ArchaeologicalEvidenceTypology',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('desc_typology_archaeological_evidence', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'archaeological_evidence_typology',
            },
        ),
        migrations.CreateModel(
            name='ArchEvBiblio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_archaeological_evidence', models.IntegerField()),
                ('id_bibliography', models.IntegerField()),
            ],
            options={
                'db_table': 'arch_ev_biblio',
            },
        ),
        migrations.CreateModel(
            name='ArchEvRelatedDoc',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('author', models.TextField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('id_archaeological_evidence', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'arch_ev_related_doc',
            },
        ),
        migrations.CreateModel(
            name='ArchEvResearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_archaeological_evidence', models.IntegerField()),
                ('id_research', models.IntegerField()),
            ],
            options={
                'db_table': 'arch_ev_research',
            },
        ),
        migrations.CreateModel(
            name='ArchEvSources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_archaeological_evidence', models.IntegerField()),
                ('id_sources', models.IntegerField()),
            ],
            options={
                'db_table': 'arch_ev_sources',
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.CharField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, null=True)),
                ('surname', models.CharField(blank=True, null=True)),
                ('affiliation', models.CharField(blank=True, null=True)),
                ('orcid', models.CharField(blank=True, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('id_anagraphic', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'author',
                'db_table_comment': 'Ogni utente registrato (anagraphic) può essere anche un autore, ma non è obbligatorio.\t\t\nOgni autore (author) può essere un utente registrato, ma può anche essere una persona esterna al sistema.\t\t\nIl rapporto tra le due tabelle è quindi uno a uno opzionale (1:1 opzionale)\t\t\n',
            },
        ),
        migrations.CreateModel(
            name='BaseMap',
            fields=[
                ('desc_base_map', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'base_map',
            },
        ),
        migrations.CreateModel(
            name='Bibliography',
            fields=[
                ('title', models.CharField(blank=True, null=True)),
                ('author', models.CharField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('doi', models.TextField(blank=True, db_column='DOI', null=True)),
                ('type', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'bibliography',
            },
        ),
        migrations.CreateModel(
            name='Chronology',
            fields=[
                ('chronological_period', models.CharField(blank=True, null=True)),
                ('start', models.IntegerField(blank=True, null=True)),
                ('stop', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'chronology',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('name_country', models.CharField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'country',
            },
        ),
        migrations.CreateModel(
            name='FirstDiscoveryMethod',
            fields=[
                ('desc_first_discovery_method', models.CharField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'first_discovery_method',
            },
        ),
        migrations.CreateModel(
            name='FunctionalClass',
            fields=[
                ('desc_functional_class', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'functional_class',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('file_name', models.TextField(blank=True, null=True)),
                ('acquisition_date', models.TextField(blank=True, null=True)),
                ('desc_image', models.TextField(blank=True, null=True)),
                ('id_image_scale', models.IntegerField(blank=True, null=True)),
                ('id_image_type', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('id_anagraphic', models.IntegerField(blank=True, null=True)),
                ('format', models.TextField(blank=True, null=True)),
                ('projection', models.TextField(blank=True, null=True)),
                ('spatial_resolution', models.TextField(blank=True, null=True)),
                ('author', models.TextField(blank=True, null=True)),
                ('source_url', models.TextField(blank=True, null=True)),
                ('key_words', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'image',
            },
        ),
        migrations.CreateModel(
            name='ImageScale',
            fields=[
                ('desc_image_scale', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'image_scale',
            },
        ),
        migrations.CreateModel(
            name='ImageType',
            fields=[
                ('desc_image_type', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'image_type',
            },
        ),
        migrations.CreateModel(
            name='IntepretationAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_interpretation', models.IntegerField(blank=True, null=True)),
                ('id_author', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'intepretation_author',
            },
        ),
        migrations.CreateModel(
            name='Interpretation',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('id_site', models.IntegerField()),
                ('id_functional_class', models.IntegerField()),
                ('id_typology', models.IntegerField(blank=True, null=True)),
                ('id_typology_detail', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('id_chronology', models.IntegerField(blank=True, null=True)),
                ('chronology_certainty_level', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'interpretation',
                'db_table_comment': 'Qui vengono raccolte le diverse interpretazioni date al sito (in merito alla sua classe funzionale e alla tipologia) proposte dai diversi ricercatori',
            },
        ),
        migrations.CreateModel(
            name='InterpretationBibliography',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_interpretation', models.IntegerField(blank=True, null=True)),
                ('id_bibliography', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'interpretation_bibliography',
            },
        ),
        migrations.CreateModel(
            name='Investigation',
            fields=[
                ('id', models.IntegerField()),
                ('project_name', models.TextField(blank=True, null=True)),
                ('period', models.TextField(blank=True, null=True)),
                ('id_investigation_type', models.IntegerField(blank=True, null=True)),
                ('id_site', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'investigation',
            },
        ),
        migrations.CreateModel(
            name='InvestigationType',
            fields=[
                ('desc_investigation_type', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'investigation_type',
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('denominazione_comune', models.TextField(blank=True, null=True)),
                ('lat', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('lon', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('sigla_provincia', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'municipality',
            },
        ),
        migrations.CreateModel(
            name='Physiography',
            fields=[
                ('desc_physiography', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'physiography',
            },
        ),
        migrations.CreateModel(
            name='PositionalAccuracy',
            fields=[
                ('degree', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('position_type', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'positional_accuracy',
            },
        ),
        migrations.CreateModel(
            name='PositioningMode',
            fields=[
                ('desc_positioning_mode', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'positioning_mode',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('codice_regione', models.TextField(blank=True, null=True)),
                ('sigla_provincia', models.TextField(blank=True, null=True)),
                ('denominazione_provincia', models.TextField(blank=True, null=True)),
                ('superficie_kmq', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('codice_sovracomunale', models.IntegerField(blank=True, null=True)),
                ('id_region', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'province',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('ripartizione_geografica', models.TextField(blank=True, null=True)),
                ('codice_regione', models.TextField()),
                ('denominazione_regione', models.TextField(blank=True, null=True)),
                ('tipologia_regione', models.TextField(blank=True, null=True)),
                ('superficie_kmq', models.TextField(blank=True, null=True)),
                ('id_region', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'region',
            },
        ),
        migrations.CreateModel(
            name='Research',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, null=True)),
                ('year', models.CharField(blank=True, max_length=4, null=True)),
                ('keywords', models.CharField(blank=True, null=True)),
                ('abstract', models.TextField(blank=True, null=True)),
                ('type', models.CharField(blank=True, null=True)),
                ('submitted_by', models.IntegerField(blank=True, null=True)),
                ('geometry', models.CharField()),
            ],
            options={
                'db_table': 'research',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('site_name', models.TextField()),
                ('site_environment_relationship', models.TextField(blank=True, null=True)),
                ('additional_topography', models.TextField(blank=True, null=True)),
                ('elevation', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('id_country', models.IntegerField()),
                ('id_region', models.IntegerField()),
                ('id_province', models.IntegerField()),
                ('id_municipality', models.IntegerField()),
                ('id_physiography', models.IntegerField(blank=True, null=True)),
                ('id_base_map', models.IntegerField(blank=True, null=True)),
                ('id_positioning_mode', models.IntegerField()),
                ('id_positional_accuracy', models.IntegerField()),
                ('id_first_discovery_method', models.IntegerField(blank=True, null=True)),
                ('locality_name', models.TextField()),
                ('lat', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('lon', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('geometry', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'site',
            },
        ),
        migrations.CreateModel(
            name='SiteArchEvidence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_site', models.IntegerField()),
                ('id_archaeological_evidence', models.IntegerField()),
            ],
            options={
                'db_table': 'site_arch_evidence',
                'db_table_comment': 'Tabella che implementa la relazione 0,n a 0,n tra sito e evidenza archeologica.',
            },
        ),
        migrations.CreateModel(
            name='SiteBibliography',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_site', models.IntegerField()),
                ('id_bibliography', models.IntegerField()),
            ],
            options={
                'db_table': 'site_bibliography',
            },
        ),
        migrations.CreateModel(
            name='SiteRelatedDocumentation',
            fields=[
                ('name', models.TextField(blank=True, null=True)),
                ('author', models.TextField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('id_site', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'site_related_documentation',
            },
        ),
        migrations.CreateModel(
            name='SiteResearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_site', models.IntegerField()),
                ('id_research', models.IntegerField()),
            ],
            options={
                'db_table': 'site_research',
            },
        ),
        migrations.CreateModel(
            name='SiteSources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_site', models.IntegerField()),
                ('id_sources', models.IntegerField()),
            ],
            options={
                'db_table': 'site_sources',
            },
        ),
        migrations.CreateModel(
            name='SiteToponymy',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('ancient_place_name', models.TextField(blank=True, null=True)),
                ('contemporary_place_name', models.TextField(blank=True, null=True)),
                ('id_site', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'site_toponymy',
            },
        ),
        migrations.CreateModel(
            name='Sources',
            fields=[
                ('name', models.TextField(blank=True, null=True)),
                ('id_chronology', models.IntegerField(blank=True, null=True)),
                ('id_sources_typology', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sources',
            },
        ),
        migrations.CreateModel(
            name='SourcesType',
            fields=[
                ('desc_sources_type', models.TextField(blank=True, null=True)),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sources_type',
            },
        ),
        migrations.CreateModel(
            name='Typology',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('desc_typology', models.TextField(blank=True, null=True)),
                ('id_functional_class', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'typology',
                'db_table_comment': 'tabella relativa alle tipologie di sito associate alle classi funzionali principali',
            },
        ),
        migrations.CreateModel(
            name='TypologyDetail',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('desc_typology_detail', models.TextField(blank=True, null=True)),
                ('id_typology', models.IntegerField(blank=True, null=True)),
                ('id_functional_class', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'typology_detail',
            },
        ),
        migrations.CreateModel(
            name='ResearchAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_author', models.ForeignKey(blank=True, db_column='id_author', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='frontend.author')),
                ('id_research', models.ForeignKey(blank=True, db_column='id_research', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='frontend.research')),
            ],
            options={
                'db_table': 'research_author',
            },
        ),
    ]
